<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Researches on</title><link>https://gc625.github.io/quartz/research/</link><description>Recent content in Researches on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://gc625.github.io/quartz/research/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://gc625.github.io/quartz/Research/OpenPCDet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gc625.github.io/quartz/Research/OpenPCDet/</guid><description>OpenPCDet Code Architecture file structure for a project should look something like this:
Directories 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 OpenPCDet (or proj name) ├── data │ ├── kitti │ ├── lyft │ └── waymo ├── docker ├── docs ├── pcdet │ ├── datasets │ ├── models │ ├── ops │ └── utils └── tools ├── cfgs ├── eval_utils ├── scripts ├── train_utils └── visual_utils</description></item><item><title/><link>https://gc625.github.io/quartz/Research/Papers/3DSSD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gc625.github.io/quartz/Research/Papers/3DSSD/</guid><description>3DSSD: Point-based 3D Single Stage Object Detector arXiv link github #todo
Main Ideas: Introduced Feature-Farthest Point Sampling (F-FPS) Introduced Fusion Sampling in [[PointNet++#Set Abstraction SA Layer]] Feature-Farthest Point Sampling (F-FPS) Objective when downsample: Remove negative points (background points) Preserve only positive points (foreground points, i.</description></item><item><title/><link>https://gc625.github.io/quartz/Research/Papers/PointNet++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gc625.github.io/quartz/Research/Papers/PointNet++/</guid><description>PointNet++ Set Abstraction (SA) Layer ![[pointnet2.png]]
Grouping Layer Sampling Layer $SL$ yields $N&amp;rsquo;\times 3$ points. $N&amp;rsquo;$ centroids and $3:= x,y,z$ coordinates $SL:(N\times 3) \to (N&amp;rsquo;\times 3)$ Input: $(N\times 3+ C)$: points before sampling and their feature vectors of len $C$ $(N&amp;rsquo;\times d)$: predicted centroids Output: $(N&amp;rsquo;\times K \times (3+C))$: centroid + $K$ points within radius of $r$ along their features Method: Ball query - what if points within radius is $&amp;lt;K$?</description></item></channel></rss>